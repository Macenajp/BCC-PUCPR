# =============================
# üì¶ IMPORTA√á√ÉO DE M√ìDULOS
# =============================
from time import sleep  # Importa a fun√ß√£o sleep para simular tempo de espera

# =============================
# üìã DADOS INICIAIS (ESTOQUE E PRODUTOS)
# =============================

# Lista com ID, pre√ßo e quantidade de cada produto
valores_e_quantidades = [
    [1, 3.75, 2],     # Produto 1: Coca-Cola
    [2, 3.67, 5],     # Produto 2: Pepsi
    [3, 9.96, 1],     # Produto 3: Monster
    [4, 1.25, 100],   # Produto 4: Caf√©
    [5, 13.99, 2],    # Produto 5: Redbull
]

# Lista com nomes dos produtos
produtos = ['Coca-Cola', 'Pepsi', 'Monster', 'Caf√©', 'Redbull']

# Dicion√°rio com o estoque de moedas e c√©dulas para troco
estoque_troco = {
    100: 2, 50: 3, 20: 5, 10: 5, 5: 5, 2: 10,
    1: 20, 0.5: 30, 0.25: 40, 0.10: 50, 0.05: 50, 0.01: 100
}

# =============================
# üí∞ FUN√á√ÉO: Calcular e Dar Troco
# =============================
def calcular_troco(produto_selecionado, fazendo_pagamento):
    print('-=' * 20)
    troco = fazendo_pagamento - valores_e_quantidades[produto_selecionado][1]  # Valor do troco
    troco_centavos = int(round(troco * 100))  # Convers√£o para centavos para evitar erros de ponto flutuante
    troco_usado = {}  # Dicion√°rio com as moedas/c√©dulas usadas

    for moeda in sorted(estoque_troco, reverse=True):  # Ordena moedas/c√©dulas do maior para o menor
        moeda_centavos = int(round(moeda * 100))
        quantidade_necessaria = troco_centavos // moeda_centavos  # Quantidade necess√°ria dessa moeda
        quantidade_usada = min(quantidade_necessaria, estoque_troco[moeda])  # Quantidade que pode ser usada

        if quantidade_usada > 0:
            troco_usado[moeda] = quantidade_usada
            troco_centavos -= quantidade_usada * moeda_centavos

    if troco_centavos > 0:  # Se n√£o conseguiu dar o troco completo
        print("N√£o h√° troco suficiente no estoque! Venda cancelada.")
        return None

    for moeda, qtd in troco_usado.items():  # Atualiza estoque de troco
        estoque_troco[moeda] -= qtd

    print(f'Seu troco √©: R$ {troco:.2f}')
    for moeda, qtd in troco_usado.items():
        tipo = "c√©dula(s)" if moeda >= 1 else "moeda(s)"
        print(f'{qtd} {tipo} de R$ {moeda:.2f}')

# =============================
# üí∞ FUN√á√ÉO: Selecionar Modo de Opera√ß√£o
# =============================
def sele√ß√£o_de_modo():
    print('-=' * 20)
    print('Bem-vindo √† M√°quina de Bebidas! \n1 -> Modo Administrador \n2 -> Comprar')
    return int(input('Selecione o modo desejado: '))  # Retorna o modo escolhido

# =============================
# üîß FUN√á√ÉO: Modo Administrador
# =============================
def modo_administrador():
    print('-=' * 20)
    print('Voc√™ est√° no modo administrador!')
    print('1 -> Cadastrar Produto \n2 -> Editar Produto \n3 -> Remover Produto')
    return int(input('Selecione a op√ß√£o desejada: '))

# =============================
# üõçÔ∏è FUN√á√ÉO: Escolher Produto
# =============================
def escolher_produto():
    print('-=' * 20)
    print('Voc√™ est√° no modo de compra!')
    for i in range(len(produtos)):
        print(f'{i} -> {produtos[i]} R$ {valores_e_quantidades[i][1]}')
    return int(input('Selecione o produto que voc√™ deseja comprar: '))

# =============================
# üîç FUN√á√ÉO: Verificar Disponibilidade
# =============================
def se_estiver_disponivel(produto_selecionado):
    print('-=' * 20)
    estoque = valores_e_quantidades[produto_selecionado][2]  # Quantidade em estoque
    if estoque > 0:
        print(f'Voc√™ escolheu: {produtos[produto_selecionado]}! H√° {estoque} unidades!')
        return int(input('Voc√™ deseja comprar o produto? \n1 - Sim \n2 - N√£o \nSelecione a op√ß√£o desejada: '))
    else:
        print(f'Voc√™ escolheu: {produtos[produto_selecionado]}, por√©m est√° indispon√≠vel =(')
        return 2

# =============================
# üí≥ FUN√á√ÉO: Realizar Pagamento
# =============================
def pagamento(produto_selecionado, deseja_comprar):
    print('-=' * 20)
    if deseja_comprar == 1:
        print('Boa escolha! √â uma √≥tima bebida!')
        valor = valores_e_quantidades[produto_selecionado][1]
        print(f'O valor total √© de: R$ {valor:.2f}')

        while True:
            pagamento = float(input('Insira o pagamento: '))
            if pagamento >= valor:
                return pagamento
            else:
                print('Valor insuficiente! Tente novamente!')
    else:
        print('Voc√™ pode escolher outra bebida se quiser!')
        print('Encerrando opera√ß√£o...')
        return None

# =============================
# ‚úÖ FUN√á√ÉO: Confirmar Pagamento e Entregar Produto
# =============================
def conferindo_pagamento(produto_selecionado, deseja_comprar, fazendo_pagamento):
    print('-=' * 20)
    if fazendo_pagamento >= valores_e_quantidades[produto_selecionado][1]:
        print('Pagamento efetuado com sucesso!')
        print('Retirando sua bebida...')
        sleep(2)  # Simula o tempo de entrega da bebida
        print(f'Pegue seu/sua {produtos[produto_selecionado]}! \nObrigado pela prefer√™ncia!')
    else:
        print('Dinheiro insuficiente =( \nVoc√™ pode tentar outra bebida!')

# =============================
# üîÅ LOOP PRINCIPAL DO SISTEMA
# =============================
while True:
    escolha = sele√ß√£o_de_modo()  # Seleciona modo de opera√ß√£o

    if escolha == 1:  # Modo administrador
        modos = modo_administrador()

        if modos == 1:  # Cadastrar novo produto
            novo_nome = input('Digite o nome do novo produto: ')
            novo_pre√ßo = float(input('Digite o pre√ßo do novo produto: '))
            qtd_produto = int(input('Digite a quantidade em estoque: '))
            novo_id = len(valores_e_quantidades) + 1

            produtos.append(novo_nome)
            valores_e_quantidades.append([novo_id, novo_pre√ßo, qtd_produto])
            print(f'Produto "{novo_nome}" cadastrado com sucesso!')

        elif modos == 2:  # Editar produto existente
            produto_id = int(input('Digite o ID do produto que deseja editar: '))
            editar_nome = input('Digite o novo nome do produto: ')
            editar_pre√ßo = float(input('Digite o novo pre√ßo do produto: '))
            editar_qtd = int(input('Digite a nova quantidade em estoque: '))

            produtos[produto_id] = editar_nome
            valores_e_quantidades[produto_id][1] = editar_pre√ßo
            valores_e_quantidades[produto_id][2] = editar_qtd
            print('Produto editado com sucesso!')

        elif modos == 3:  # Remover produto
            remover_produto = int(input('Digite o ID do produto que deseja remover: '))
            nome_removido = produtos[remover_produto]
            del produtos[remover_produto]
            del valores_e_quantidades[remover_produto]
            print(f'Produto "{nome_removido}" removido com sucesso!')

    elif escolha == 2:  # Modo de compra
        produto_selecionado = escolher_produto()
        if produto_selecionado < 0 or produto_selecionado >= len(produtos):
            print('ID inv√°lido!')
            continue

        deseja_comprar = se_estiver_disponivel(produto_selecionado)
        if deseja_comprar == 2:
            continue

        fazendo_pagamento = pagamento(produto_selecionado, deseja_comprar)
        if fazendo_pagamento is None:
            continue

        troco = calcular_troco(produto_selecionado, fazendo_pagamento)
        if troco is None:
            print('Venda cancelada devido √† falta de troco.')
            continue

        valores_e_quantidades[produto_selecionado][2] -= 1  # Atualiza estoque do produto

        conferindo_pagamento(produto_selecionado, deseja_comprar, fazendo_pagamento)  # Entrega produto
